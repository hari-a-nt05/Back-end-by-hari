name: Backend CI/CD Pipeline

on:
  push:
    branches: [ "main" ]   # Deploy when code is pushed to main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Setup Python environment (for FastAPI, Django, Flask)
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # Step 4: Ensure backend directory exists on EC2
      - name: Ensure backend directory exists
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            sudo mkdir -p /var/www/ats-backups/backend
            sudo mkdir -p /home/ubuntu/backend
            sudo chown -R ubuntu:ubuntu /home/ubuntu/backend
            sudo chmod -R 755 /home/ubuntu/backend

      # Step 5: Backup current backend before deployment
      - name: Backup current backend
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
            BACKUP_DIR="/var/www/ats-backups/backend"
            sudo mkdir -p $BACKUP_DIR/logs
            if [ -d /home/ubuntu/backend ]; then
              sudo cp -r /home/ubuntu/backend $BACKUP_DIR/backend-$TIMESTAMP
              echo "$(date): ‚úÖ Backup created at $BACKUP_DIR/backend-$TIMESTAMP" | sudo tee -a $BACKUP_DIR/logs/deploy.log
            else
              echo "$(date): ‚ö†Ô∏è No existing backend folder found. Skipping backup." | sudo tee -a $BACKUP_DIR/logs/deploy.log
            fi

      # Step 6: Copy new backend code to EC2
      - name: Copy backend code to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "."
          target: "/home/ubuntu/backend"
          overwrite: true
          rm: false

      # Step 7: Install dependencies and restart service
      - name: Install dependencies & restart backend
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            set -e
            cd /home/ubuntu/backend
            echo "${{ secrets.BACKEND_ENV_FILE }}" > .env
            python3 -m venv .venv
            source .venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

            echo "üîÅ Restarting backend service..."
            if sudo systemctl restart backend.service; then
              echo "‚úÖ Backend restarted successfully."
            else
              echo "‚ö†Ô∏è Backend restart failed. Rolling back to previous version..."
              BACKUP_DIR="/var/www/ats-backups/backend"
              LATEST_BACKUP=$(ls -td $BACKUP_DIR/backend-* | head -1)
              if [ -d "$LATEST_BACKUP" ]; then
                sudo rm -rf /home/ubuntu/backend
                sudo cp -r "$LATEST_BACKUP" /home/ubuntu/backend
                sudo systemctl restart backend.service
                echo "‚úÖ Rolled back to previous version: $LATEST_BACKUP"
              else
                echo "‚ùå No rollback backup found. Manual recovery needed."
              fi
            fi

      # Step 8: Verify service status
      - name: Verify backend status
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            sudo systemctl status backend.service --no-pager || true
            echo "‚úÖ Backend deployment completed successfully."
